name: CI Pipeline

on:
  push:
    branches:
      - ops

jobs:
  project-testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code

        uses: actions/checkout@v4

      - name: Setup Python

        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Linting custom logging
        run: |
          flake8 src/custom_logging/__init__.py

      - name: Linting exception
        run: |
          flake8 src/exeption/__init__.py

      - name: Linting utils
        run: |
          flake8 src/utils/__init__.py

      - name: Linting data injection
        run: |
          flake8 src/data/data_injection.py

      - name: Linting data preprocessing
        run: |
          flake8 src/data/data_preprocessing.py

      - name: Linting feature engineering
        run: |
          flake8 src/features/feature_engineering.py

      - name: Linting model building
        run: |
          flake8 src/models/train_model.py

      - name: Linting model evaluation
        run: |
          flake8 src/models/model_evaluation.py
      
      - name: linting register model
        run: |
          flake8 src/models/register_model.py
      - name: linting stage transaction
        run: |
          flake8 src/models/stage_transaction.py
      - name: Run pipeline with DVC
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          dvc repro
      - name: linting test_model
        run: |
          flake8 test/test_model.py
      - name: Run model tests
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          python -m unittest discover -s test -p "test_model.py"
      - name: Promote model to production
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          python src/models/stage_transaction.py

      - name: Run Flask app tests
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          flake8 flask_app/app.py
          python -m unittest discover -s test -p "test_flask_app.py"
  docker-build-and-push-to-AWS-ECR:
    runs-on: ubuntu-latest 
    needs: project-testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: ECR Login 
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          export AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Docker build
        run: |
          docker build -t ${{ secrets.DOCKER_IMAGE_NAME }} .

      - name: Tag Docker image
        run: |
          docker tag ${{ secrets.DOCKER_IMAGE_NAME }}:latest ${{ secrets.AWS_ECR_REGISTRY }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.DOCKER_IMAGE_NAME }}:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ECR_REGISTRY }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.DOCKER_IMAGE_NAME }}:latest 

  AWS-EC2-Deployment:
    runs-on: ubuntu-latest 
    needs: project-testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4    
      - name: ec2 deployment
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_DEPLOYMENT_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_DEPLOYMENT_SSH_KEY }}
          script: |
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            docker pull ${{ secrets.AWS_ECR_REGISTRY }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.DOCKER_IMAGE_NAME }}:latest
            docker stop my-app || true
            docker rm my-app || true
            docker run -d -p 5000:5000 --name my-app -e DAGSHUB_PAT=${{ secrets.DAGSHUB_PAT }} ${{ secrets.AWS_ECR_REGISTRY }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.DOCKER_IMAGE_NAME }}:latest